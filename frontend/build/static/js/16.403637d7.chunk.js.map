{"version":3,"sources":["views/Table/CustomisationList.js","views/Table/ProductCard.js","views/Table/CartItem.js","views/Table/Cart.js","views/Table/Order.js","views/Table/Table.js"],"names":["useStyles","makeStyles","theme","root","width","display","flexDirection","buttonBox","justifyContent","backButton","backgroundColor","colors","red","addButton","green","CustomisationList","customisations","onSelect","onDone","onCancel","selected","classes","React","useState","checked","setChecked","handleToggle","value","currentIndex","indexOf","id","newChecked","push","splice","useEffect","forEach","customisation","List","className","ListItemText","primary","map","labelId","ListItem","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","name","ListItemSecondaryAction","price","Box","Button","variant","media","height","border","color","palette","text","fill","transform","transition","customisationButton","fontSize","lineHeight","marginBottom","productName","fontWeight","productCard","boxShadow","focused","productCardContent","description","removeButton","ProductCard","product","dispatch","useDispatch","selectedProducts","useSelector","state","order","selectedCustomisations","useRef","enableCustomisation","setCustomisationStatus","orderedProduct","selectedProduct","find","p","onFinalAdd","current","addProductToOrder","effect","Card","clsx","CardContent","Grow","in","requiredChange","filter","e","image","CardMedia","title","Typography","gutterBottom","Divider","Grid","container","justify","spacing","productClone","Object","assign","quantity","length","onAdd","endIcon","align","style","removeProductFromOrder","onRemove","cartItems","cursor","actionsCard","padding","background","CartItem","item","xs","noWrap","cartItemPanel","cost","CardActions","emptyCart","emptyCartImage","alignSelf","emptyCartText","paddingBottom","cartTitle","cartTitleMobile","heading","typography","pxToRem","secondaryHeading","secondary","orderButton","orderBox","icon","verticalAlign","details","alignItems","column","flexBasis","helper","borderLeft","divider","link","main","textDecoration","Cart","orderState","tableState","table","cartClicked","setCartClicked","orderedProducts","reduce","product1","product2","concat","totalCost","productTotalPrice","customisation1","customisation2","placeOrder","productsInOrder","slice","tableId","selectedTable","products","status","addOrder","isMobile","fullWidth","bottom","position","maxHeight","overflow","AccordionSummary","expandIcon","AccordionDetails","index","AccordionActions","disabled","margin","initiateOrderAdd","minHeight","component","alt","src","sortBy","helperBox","marginTop","marginRight","Order","productState","setProducts","setSort","searchBy","branchState","branch","topProductsOfBranch","topProducts","productsInState","handleSearch","toLowerCase","includes","getTopProductsOfBranch","maxWidth","lg","TextField","onChange","event","target","InputProps","startAdornment","InputAdornment","SvgIcon","placeholder","FormControl","InputLabel","Select","sort","productsClone","prod1","prod2","sortItems","label","MenuItem","flexWrap","card","content","detailsBox","topButton","TableView","activeOrders","orders","orderItems","item1","item2","openRowProductId","setOpenRowProductId","getOrderByTableId","getProducts","Container","add","branchName","IconButton","aria-label","size","Collapse","timeout","unmountOnExit","Table","TableBody","TableRow","TableCell","scope"],"mappings":"uWAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACPC,QAAQ,OACRC,cAAc,UAEhBC,UAAU,CACRF,QAAQ,OACRC,cAAc,MACdE,eAAe,iBAEjBC,WAAW,CACTC,gBAAiBR,EAAMS,OAAOC,KAEhCC,UAAU,CACRH,gBAAiBI,IAAM,UAIZ,SAASC,EAAT,GAAoF,IAAxDC,EAAuD,EAAvDA,eAAgBC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAC/EC,EAAUrB,IADgF,EAElEsB,IAAMC,SAAS,CAAC,IAFkD,mBAEzFC,EAFyF,KAEhFC,EAFgF,KAI1FC,EAAe,SAACC,GACpB,IAAMC,EAAeJ,EAAQK,QAAQF,EAAMG,IACrCC,EAAU,YAAOP,IACD,IAAlBI,GACFG,EAAWC,KAAKL,EAAMG,IACtBb,EAASU,EAAM,SAEfI,EAAWE,OAAOL,EAAc,GAChCX,EAASU,EAAM,WAGjBF,EAAWM,IAUb,OAPAG,qBAAU,WACRd,EAASe,SAAQ,SAAAC,GACdA,EAAcN,IACbJ,EAAaU,QAEjB,CAAChB,IAGD,eAACiB,EAAA,EAAD,CAAMC,UAAWjB,EAAQlB,KAAzB,UACc,cAACoC,EAAA,EAAD,CAAeC,QAAS,qBAEnCxB,EAAeyB,KAAI,SAACL,GACnB,IAAMM,EAAO,8BAA0BN,EAAcN,IAErD,OACE,eAACa,EAAA,EAAD,CAAiCC,UAAMC,EAAWC,OAAK,EAACC,QAAM,EAACC,QAAS,WAAKtB,EAAaU,IAA1F,UACE,cAACa,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACL3B,SAAgD,IAAvCA,EAAQK,QAAQO,EAAcN,IACvCsB,UAAW,EACXC,eAAa,EACbC,WAAY,CAAE,kBAAmBZ,OAGrC,cAACH,EAAA,EAAD,CAAcC,QAASJ,EAAcmB,OACrC,cAACC,EAAA,EAAD,UACA,cAACjB,EAAA,EAAD,CAAeC,QAASJ,EAAcqB,YAZzBrB,EAAcN,OAiBjC,eAAC4B,EAAA,EAAD,CAAKpB,UAAWjB,EAAQd,UAAxB,UACA,cAACoD,EAAA,EAAD,CAAQrB,UAAWjB,EAAQZ,WAAYuC,QAAS,WAAK7B,KAAayC,QAAQ,YAA1E,qBAEA,cAACD,EAAA,EAAD,CAAQrB,UAAWjB,EAAQR,UAAWmC,QAAS,WAAK9B,GAAO,IAAS0C,QAAQ,YAA5E,+B,YC7DA5D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2D,MAAO,CACLC,OAAQ,KAEVf,OAAQ,CACNgB,OAAQ,kBACRC,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B,UAAW,CACTwB,MAAO,QACP,uBAAwB,CACtBG,KAAM,QACNC,UAAW,kBACXC,WAAY,mBAIlBC,oBAAqB,CACnBC,SAAU,QACVnE,MAAO,QACPoE,WAAY,QACZC,aAAc,QAEhBC,YAAa,CACXV,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,SACVI,WAAY,MACZH,WAAY,UAEdI,YAAa,CACXH,aAAc,QACd,UAAW,CACTI,UACE,qEAGNC,QAAS,CACPpE,gBAAiB,WAEnBqE,mBAAoB,CAClB1E,QAAS,OACTC,cAAe,UAEjBmD,MAAO,CACLO,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,QAEZS,YAAa,CACXhB,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,SAEZ1D,UAAW,CACTsD,KAAMjE,EAAMS,OAAOC,KAErBqE,aAAc,CACZd,KAAMjE,EAAMS,OAAOG,WAgJRoE,IA5IK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf9D,EAAUrB,IACVoF,EAAWC,cAEXC,GADaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAU,IACtBH,kBAAoB,GAClDI,EAAyBC,iBAAO,IALH,EAMmBpE,oBAAS,GAN5B,mBAM5BqE,EAN4B,KAMPC,EANO,KAO7BC,EAAiBH,iBAAO,IAC1BI,EACFT,EAAiBU,MAAK,SAACC,GACrB,OAAOA,EAAEnE,KAAOqD,EAAQrD,OACpB,GAaFoE,EAAa,WACjBJ,EAAeK,QAAQnF,eAAiB0E,EAAuBS,QAC/Df,EAASgB,YAAkBN,EAAeK,UAC1CL,EAAeK,QAAU,GACzBT,EAAuBS,QAAU,GACjCN,GAAuB,IAoBzB,OACE,cAAC,IAAD,CAAiBQ,OAAO,QAAxB,SACE,eAACC,EAAA,EAAD,CACEhE,UACEsD,EACIW,YAAKlF,EAAQuD,YAAavD,EAAQyD,SAClCzD,EAAQuD,YAJhB,UAOE,cAAC4B,EAAA,EAAD,CAAalE,UAAWjB,EAAQ0D,mBAAhC,SACGa,EACC,cAACa,EAAA,EAAD,CAAMC,IAAI,EAAV,SACA,cAAC3F,EAAD,CACEK,SAAUsE,EAAuBS,QACjCnF,eAAgBmE,EAAQ/C,cACxBlB,OAAQgF,EACR/E,SAAU,WAAK0E,GAAuB,IACtC5E,SA9BgB,SAACmB,EAAeuE,GACnB,QAAnBA,EACFjB,EAAuBS,QAAvB,sBACKT,EAAuBS,SAD5B,CAEE/D,IAE0B,WAAnBuE,IACTjB,EAAuBS,QAAUT,EAAuBS,QAAQS,QAC9D,SAACC,GAAD,OAAOA,EAAE/E,KAAOM,EAAcN,YAyB1B,eAAC4B,EAAA,EAAD,WACGyB,EAAQ2B,OACP,cAACC,EAAA,EAAD,CACED,MAAO3B,EAAQ2B,MACfE,MAAO7B,EAAQ5B,KACfjB,UAAWjB,EAAQwC,QAGvB,cAACoD,EAAA,EAAD,CAAYC,cAAY,EAAC5E,UAAWjB,EAAQqD,YAA5C,SACGS,EAAQ5B,OAGX,eAAC0D,EAAA,EAAD,CAAY3E,UAAWjB,EAAQoC,MAA/B,gBACM0B,EAAQ1B,SAEd,cAACwD,EAAA,EAAD,CAAY3E,UAAWjB,EAAQ2D,YAA/B,SACGG,EAAQH,mBAKjB,cAACmC,EAAA,EAAD,IACA,cAACzD,EAAA,EAAD,CAAKuC,EAAG,EAAR,SACIL,EAqCE,KApCF,eAACwB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBAAgBC,QAAS,EAAjD,UACE,cAAC5D,EAAA,EAAD,CACEC,QAAQ,WACRI,MAAM,UACNhB,QAAS,YApFT,SAACmC,GACb,IAAMqC,EAAeC,OAAOC,OAAO,GAAIvC,GACvCqC,EAAaG,SAAW,EACxBH,EAAa/D,MAAQ0B,EAAQ1B,MAC7BqC,EAAeK,QAAUqB,EACrBA,EAAapF,cAAcwF,OAAQ/B,GAAuB,GAE5DK,IA8EY2B,CAAM1C,IAER7C,UAAWjB,EAAQ0B,OACnB+E,QAAS,cAAC,IAAD,CAAkBxF,UAAWjB,EAAQ4D,eAPhD,iBAYA,cAACgC,EAAA,EAAD,CACEc,MAAM,SACN/D,MAAM,cACNkD,cAAY,EACZc,MAAO,CAAEzD,SAAU,QAJrB,UAMKwB,GAAmBA,EAAgB4B,UAAa,GAAK,SAG1D,cAAChE,EAAA,EAAD,CACEC,QAAQ,WACRI,MAAM,UACNhB,QAAS,YAvFN,SAACmC,GAChB,IAAMqC,EAAeC,OAAOC,OAAO,GAAIvC,GACvCqC,EAAaxG,eAAiB,GAC9BoE,EAAS6C,YAAuBT,IAqFlBU,CAAS/C,IAEX7C,UAAWjB,EAAQ0B,OACnB+E,QACE,cAAC,IAAD,CAA2BxF,UAAWjB,EAAQR,YARlD,gC,+PClLRb,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiI,UAAW,CACT/H,MAAO,OACPmE,SAAU,SAEZ1D,UAAW,CACTsD,KAAMjE,EAAMS,OAAOC,IACnB,UAAU,CACRuD,KAAK,SAEPiE,OAAQ,WAEVnD,aAAc,CACZd,KAAMjE,EAAMS,OAAOG,MACnB,UAAU,CACRqD,KAAK,SAEPiE,OAAQ,WAEVC,YAAa,CACXhI,QAAS,OACTiI,QAAS,QACTC,WAAY,iBAgEDC,EA5DE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZrD,EAAWC,cACXhE,EAAUrB,IAYhB,OACE,cAACoH,EAAA,EAAD,CAAMqB,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,UACE,eAACpC,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAawB,MAAO,CAAEM,QAAS,SAA/B,SACE,cAAC5E,EAAA,EAAD,CAAKuC,EAAG,EAAR,SACE,eAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBAAgBC,QAAS,EAAjD,UACE,cAACH,EAAA,EAAD,CAAMqB,MAAI,EAACC,GAAI,EAAf,SACE,cAACzB,EAAA,EAAD,CAAY0B,QAAM,EAAlB,SAAoBF,EAAKlF,SAE3B,cAAC6D,EAAA,EAAD,CACEsB,GAAI,EACJD,MAAI,EAFN,SAIE,eAACnC,EAAA,EAAD,CAAMhE,UAAWjB,EAAQgH,YAAzB,UACE,cAAC,IAAD,CACErF,QAAS,kBA3Bf,SAACmC,GACb,IAAMqC,EAAeC,OAAOC,OAAO,GAAIvC,GACvCqC,EAAaG,SAAW,EACxBH,EAAaoB,eAAgB,EAC7BxD,EAASgB,YAAkBoB,IAuBMK,CAAMY,IACrBnG,UAAWjB,EAAQR,YAErB,cAACoG,EAAA,EAAD,CACE3E,UAAWjB,EAAQ8G,UACnBvE,QAAQ,KACRmE,MAAM,SAHR,SAKGU,EAAKd,WAER,cAAC,IAAD,CACE3E,QAAS,kBA/BXmC,EA+B0BsD,OA9B1CrD,EAAS6C,YAAuB9C,IADjB,IAACA,GAgCE7C,UAAWjB,EAAQ4D,oBAIzB,cAACmC,EAAA,EAAD,CAAMqB,MAAI,EAACC,GAAI,EAAf,SACE,eAACzB,EAAA,EAAD,CAAYC,cAAY,EAACtD,QAAQ,KAAjC,eACK6E,EAAKI,iBAMlB,cAACC,EAAA,EAAD,Y,yBC1EJ9I,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,QAET2I,UAAW,CACT1I,QAAS,OACTC,cAAe,UAEjB0I,eAAgB,CACd5I,MAAO,QACP6I,UAAW,UAEbC,cAAe,CACblF,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,SACV0E,UAAW,SACXE,cAAe,QAEjBC,UAAW,CACTpF,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,SACV+D,QAAS,OACT3D,WAAY,KAEd0E,gBAAiB,CACfrF,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,OACV+D,QAAS,OACT3D,WAAY,KAEd2E,QAAS,CACP/E,SAAUrE,EAAMqJ,WAAWC,QAAQ,KAErCC,iBAAkB,CAChBlF,SAAUrE,EAAMqJ,WAAWC,QAAQ,IACnCxF,MAAO9D,EAAM+D,QAAQC,KAAKwF,WAE5BC,YAAa,CACXjJ,gBAAiBR,EAAMS,OAAOG,OAEhC8I,SAAU,CACRvJ,QAAS,OACTG,eAAgB,iBAElBqJ,KAAM,CACJC,cAAe,SACfhG,OAAQ,GACR1D,MAAO,IAET2J,QAAS,CACPC,WAAY,UAEdC,OAAQ,CACNC,UAAW,UAEbC,OAAQ,CACNC,WAAW,aAAD,OAAelK,EAAM+D,QAAQoG,SACvC/B,QAASpI,EAAMqH,QAAQ,EAAG,IAE5B+C,KAAM,CACJtG,MAAO9D,EAAM+D,QAAQzB,QAAQ+H,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,kBA2MPC,IAtMF,WACX,IAAMrF,EAAWC,cACXqF,EAAanF,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAU,GACpDkF,EAAapF,aAAY,SAACC,GAAD,OAAWA,EAAMoF,UAAU,GACpDtF,EAAmBoF,EAAWpF,kBAAoB,GAJvC,EAKqB/D,oBAAS,GAL9B,mBAKVsJ,EALU,KAKGC,EALH,KAMXC,EACJzF,EACG7C,KAAI,SAAC0C,GAAD,OAAaA,EAAO,SACxB6F,QAAO,SAACC,EAAUC,GAAX,OAAwBD,EAASE,OAAOD,KAAW,KAAO,GAChE7J,EAAUrB,IACZoL,EAAY,EAChBL,EAAgB5I,SAAQ,SAACgD,GACvB,IAAMkG,EACJlG,EAAQnE,eAAegK,QACrB,SAACM,EAAgBC,GAAjB,OACED,EAAiBC,EAAe9H,QAClC,GACE0B,EAAQ1B,MACV0B,EAAQwC,SAAW,EACrByD,GAAwBC,EAAoBlG,EAAQwC,SAEpDyD,GAAwBC,KAG5B,IAGMG,EAAa,WACjB,IAAM/F,EAAQ,GACVgG,EAAkBV,EAAgBW,MAAM,GAC5CD,EAAkBA,EAAgBhJ,KAAI,SAAC0C,GACrC,IAAIqC,EAAeC,OAAOC,OAAO,GAAIvC,GAMrC,OALAqC,EAAaxG,eAAiBmE,EAAQnE,eAAeyB,KACnD,SAACL,GACC,OAAOA,EAAcN,MAGlB0F,KAET/B,EAAMkG,QAAUhB,EAAWiB,cAAc9J,GACzC2D,EAAMoG,SAAWJ,EACjBhG,EAAMhC,MAAQ2H,EACd3F,EAAMqG,OAAS,UACf1G,EAAS2G,YAAStG,KAwJpB,OArJMuG,WAEA,cAAC5E,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS2E,WAAW,EAA5C,SACGpB,EACC,eAACvE,EAAA,EAAD,CACE0B,MAAO,CACLkE,OAAQ,IACRC,SAAU,QACV/L,MAAO,MACPgM,UAAW,OACXC,SAAU,UANd,UASE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,IAAD,CAAiBvJ,QAAS,WACpC8H,GAAgBD,MAFpB,SAKE,cAAC5D,EAAA,EAAD,CAAY3E,UAAWjB,EAAQgI,gBAA/B,kCAIF,cAACmD,EAAA,EAAD,CAAkBlK,UAAWjB,EAAQ0I,QAArC,SACE,cAACzD,EAAA,EAAD,CACE0B,MAAO,CACL3H,QAAS,OACTC,cAAe,SACfF,MAAO,QAJX,SAOG2K,EAAgBtI,KAAI,SAACgG,EAAMgE,GAC1B,OAAO,cAAC,EAAD,CAAgChE,KAAMA,GAAvBA,EAAK3G,GAAK2K,UAItC,cAACtF,EAAA,EAAD,IACA,eAACuF,EAAA,EAAD,CAAkB1E,MAAO,CAAC3H,QAAQ,OAAQG,eAAe,iBAAzD,UACA,eAACyG,EAAA,EAAD,CAAYC,cAAY,EAACtD,QAAQ,KAAjC,yBACqBwH,KAEf,cAACzH,EAAA,EAAD,CACEC,QAAQ,YACRZ,QAAS,WACPwI,KAEFmB,UAAWrH,EAAiBsC,OAC5BtF,UAAWjB,EAAQsI,YACnB7B,QAAS,cAAC,IAAD,IAPX,+BAcR,eAACpE,EAAA,EAAD,CAAKsE,MAAO,CAAC3H,QAAQ,OAAQG,eAAe,SAAW0L,OAAQ,IAC/DC,SAAU,SADV,UAEE,cAACxI,EAAA,EAAD,CACAqE,MAAO,CACLO,WAAY3H,IAAI,KAChBgM,OAAO,QAEThJ,QAAQ,YACRZ,QAAS,WAnFnBoC,EAASyH,aAAiB,KA6EhB,qBAYF,cAAClJ,EAAA,EAAD,CACEqE,MAAO,CACLO,WAAYzH,IAAM,KAClB8L,OAAO,QAEThJ,QAAQ,YACRZ,QAAS,WACP8H,GAAgBD,IAPpB,uBAoBN,eAACnH,EAAA,EAAD,CACEsE,MAAO,CACL3H,QAAS,OACTC,cAAe,SACfwM,UAAW,OACX1M,MAAM,OALV,UAQI,cAAC6G,EAAA,EAAD,CAAYC,cAAY,EAAC5E,UAAWjB,EAAQ+H,UAAW2D,UAAU,KAAjE,gCAG6B,IAA5BzH,EAAiBsC,QAChB,eAAClE,EAAA,EAAD,CAAKpB,UAAWjB,EAAQ0H,UAAxB,UACE,qBACEiE,IAAI,aACJC,IAAI,0BACJ3K,UAAWjB,EAAQ2H,iBAErB,cAAC/B,EAAA,EAAD,CACErD,QAAQ,KACRmJ,UAAU,KACVzK,UAAWjB,EAAQ6H,cAHrB,8CASH6B,EAAgBtI,KAAI,SAACgG,EAAMgE,GAC1B,OAAO,cAAC,EAAD,CAAgChE,KAAMA,GAAvBA,EAAK3G,GAAK2K,MAElC,cAACtF,EAAA,EAAD,IACC7B,EAAiBsC,OAAS,EACzB,cAACR,EAAA,EAAD,CAAMqB,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,UACE,cAAClC,EAAA,EAAD,UACE,eAAC9C,EAAA,EAAD,CAAKpB,UAAWjB,EAAQuI,SAAxB,UACE,eAAC3C,EAAA,EAAD,CAAYC,cAAY,EAACtD,QAAQ,KAAjC,yBACewH,KAEf,cAACzH,EAAA,EAAD,CACEC,QAAQ,YACRZ,QAAS,WACPwI,KAEFmB,UAAWrH,EAAiBsC,OAC5BtF,UAAWjB,EAAQsI,YACnB7B,QAAS,cAAC,IAAD,IAPX,kCAgBR,6B,wWClQN9H,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCgN,OAAQ,CACN9M,MAAO,SAET+M,UAAW,CACT9M,QAAS,OACTC,cAAe,MACf8M,UAAW,OACX5M,eAAgB,iBAElBuC,OAAQ,CACN3C,MAAO,OACPmE,SAAU,QACV8I,YAAa,aA2IFC,EAvID,WACZ,IAAMlI,EAAWC,cACXhE,EAAUrB,IACVuN,EAAehI,aAAY,SAACC,GAAD,OAAWA,EAAML,WAHhC,EAIc5D,mBAAS,IAJvB,mBAIXsK,EAJW,KAID2B,EAJC,OAKQjM,mBAAS,IALjB,mBAKX2L,EALW,KAKHO,EALG,KAMZC,EAAW/H,iBAAO,IAElBgI,EAAcpI,aAAY,SAACC,GAAD,OAAWA,EAAMoI,UAC3CC,EAAuBF,GAAeA,EAAYG,aAAgB,GAClEC,EAAmBR,GAAgBA,EAAa1B,UAAa,GAC7DmC,EAAe,SAACrM,GACpB+L,EAASvH,QAAUxE,EACnB6L,EACEO,EAAgBnH,QAAO,SAACzB,GACtB,OAAOA,EAAQ5B,KAAK0K,cAAcC,SAASvM,EAAMsM,oBA8CvD,OATA/L,qBAAU,WACRkD,EAAS+I,iBACR,IAEHjM,qBAAU,WACR8L,EAAa,IACbR,EAAYO,KACX,CAACA,IAGF,eAAC3G,EAAA,EAAD,CAAMC,WAAS,EAAC+G,UAAU,EAA1B,UACE,eAAChH,EAAA,EAAD,CAAMY,MAAO,CAAEqF,YAAa,QAAU5E,MAAI,EAAC4F,GAAI,EAA/C,UACE,cAAC3K,EAAA,EAAD,UACE,eAAC8C,EAAA,EAAD,WACE,cAAC8H,EAAA,EAAD,CACErC,WAAS,EACTsC,SAAU,SAACC,GACTR,EAAaQ,EAAMC,OAAO9M,QAE5B+M,WAAY,CACVC,eACE,cAACC,EAAA,EAAD,CAAgBzC,SAAS,QAAzB,SACE,cAAC0C,EAAA,EAAD,CAAStK,SAAS,QAAQP,MAAM,SAAhC,SACE,cAAC,IAAD,SAKR8K,YAAY,oBACZlL,QAAQ,WACRjC,MAAO+L,EAASvH,UAElB,eAACzC,EAAA,EAAD,CAAKpB,UAAWjB,EAAQ8L,UAAxB,UACE,cAACxJ,EAAA,EAAD,CACEC,QAAQ,YACRI,MAAM,UACNhB,QAAS,WAvCrBwK,EAAYK,IA0CAvL,UAAWjB,EAAQ0B,OANrB,yBAUA,eAACgM,EAAA,EAAD,CAAazM,UAAWjB,EAAQ6L,OAAQtJ,QAAQ,WAAhD,UACE,cAACoL,EAAA,EAAD,CAAYlN,GAAG,oCAAf,qBAGA,eAACmN,EAAA,EAAD,CACEtN,MAAOuL,EACPqB,SAAU,SAACC,IAjFT,SAACU,GACjB,IAAIC,EAAgBtD,EAASH,MAAM,GAEnC,GADA+B,EAAQyB,GACJC,EAAcvH,OAAS,EAQzB,OAPI8F,EAASvH,UACXgJ,EAAgBA,EAAcvI,QAAO,SAACzB,GACpC,OAAOA,EAAQ5B,KACZ0K,cACAC,SAASR,EAASvH,QAAQ8H,mBAGzBiB,GACN,IAAK,YACH1B,EACE2B,EAAcD,MAAK,SAACE,EAAOC,GAAR,OAAkBD,EAAM3L,MAAQ4L,EAAM5L,UAE3D,MACF,IAAK,aACH+J,EACE2B,EAAcD,MAAK,SAACE,EAAOC,GAAR,OAAkBA,EAAM5L,MAAQ2L,EAAM3L,WA+DjD6L,CAAUd,EAAMC,OAAO9M,QAEzB4N,MAAM,UALR,UAOE,cAACC,EAAA,EAAD,CAAU7N,MAAM,GAAhB,SACE,wCAEF,cAAC6N,EAAA,EAAD,CAAU7N,MAAO,YAAjB,+BACA,cAAC6N,EAAA,EAAD,CAAU7N,MAAO,aAAjB,6CAMV,cAACyF,EAAA,EAAD,CACEY,MAAO,CAAE3H,QAAS,OAAQC,cAAe,MAAOmP,SAAU,QAD5D,SAGG5D,EAASpJ,KAAI,SAACwD,EAAGwG,GAAJ,OACZ,cAACrF,EAAA,EAAD,CAAMqB,MAAI,EAAoB4F,GAAI,EAAG3F,GAAI,GAAzC,SACE,cAACxD,EAAA,EAAD,CAAaC,QAASc,KADRA,EAAEnE,GAAK2K,WAM7B,cAAChC,EAAA,EAAD,QCzIAzK,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CAACC,MAAM,OAAQC,QAAQ,OAAOC,cAAc,UAClDoE,YAAa,CACXV,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,SACVI,WAAY,MACZH,WAAY,UAEdkL,KAAM,CACJjL,aAAc,QACd,UAAW,CACTI,UACE,qEAGN8K,QAAS,CACPtP,QAAS,OACTC,cAAe,UAEjBmD,MAAO,CACLO,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,OACVqI,OAAO,SAETjF,SAAU,CACR3D,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,OACVqI,OAAO,SAETd,OAAQ,CACN9H,MAAO9D,EAAM+D,QAAQC,KAAK1B,QAC1B+B,SAAU,OACVqI,OAAO,QACPrE,WAAW,SACX5D,WAAW,OAEbiL,WAAY,CACVvP,QAAS,OACTC,cAAe,OAEjBuP,UAAY,CACV5G,UAAU,SACV7I,MAAM,aAsJK0P,UAlJG,WAChB,IAAMzO,EAAUrB,IACVoF,EAAWC,cACXqF,EAAanF,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAU,GACpDkF,EAAapF,aAAY,SAACC,GAAD,OAAWA,EAAMoF,SAC1CA,EAASD,GAAcA,EAAWiB,eAAkB,GAEpDmE,GADSrF,EAAWsF,QAAU,IAEjCvN,KAAI,SAACgD,GACJ,OAAOA,EAAMwK,cAEdjF,QAAO,SAACkF,EAAOC,GACd,OAAOD,EAAM/E,OAAOgF,KACnB,IAbiB,EAe0B7O,IAAMC,SAAS,CAAEO,GAAI,OAf/C,mBAefsO,EAfe,KAeGC,EAfH,KAoBtBnO,qBAAU,WACJ0I,EAAM9I,IACRsD,EAASkL,YAAkB1F,EAAM9I,OAElC,CAACsD,EAAUwF,IACd,IAAM5H,EAAU,WACdoC,EAASmL,eACTnL,EAASyH,aAAiB,KAE5B,OACE,cAAC2D,EAAA,EAAD,CAAWpC,UAAU,EAArB,SACG1D,GAAcA,EAAW+F,IACxB,cAAC,EAAD,CAAO7F,MAAOA,IAEd,eAACxD,EAAA,EAAD,CAAMqB,MAAI,EAACC,GAAI,GAAIpG,UAAWjB,EAAQsO,QAAtC,UACM,cAAChM,EAAA,EAAD,CACAK,MAAM,UACNhB,QAAS,WACPA,KAEFY,QAAQ,YACRtB,UAAWjB,EAAQwO,UANnB,iCAUJ,eAACrJ,EAAA,EAAD,CAAalE,UAAWjB,EAAQlB,KAAhC,UACI,cAAC8G,EAAA,EAAD,CAAYjD,MAAM,cAAckD,cAAY,EAACtD,QAAQ,KAArD,SACGgH,EAAMrH,OAET,cAAC0D,EAAA,EAAD,CAAYjD,MAAM,gBAAgBJ,QAAQ,QAA1C,mBACMgH,EAAM8F,cAEXX,EAAatN,KAAI,SAACgD,GAAD,OAChB,eAACa,EAAA,EAAD,CAAMhE,UAAWjB,EAAQqO,KAAzB,UACE,eAAClJ,EAAA,EAAD,WACI,cAACS,EAAA,EAAD,CAAYC,cAAY,EAAC5E,UAAWjB,EAAQqD,YAA5C,SACGe,EAAMf,cAET,eAAChB,EAAA,EAAD,CAAKpB,UAAWjB,EAAQuO,WAAxB,UACA,eAAC3I,EAAA,EAAD,CAAY3E,UAAWjB,EAAQoC,MAA/B,gBACMgC,EAAMhC,SAEZ,eAACwD,EAAA,EAAD,CAAY3E,UAAWjB,EAAQsG,SAA/B,UACGlC,EAAMkC,SADT,UAGA,cAACV,EAAA,EAAD,CAAY3E,UAAWjB,EAAQyK,OAA/B,SACGrG,EAAMqG,YAGT,eAACpI,EAAA,EAAD,WACE,cAACiN,EAAA,EAAD,CACEC,aAAW,aACXC,KAAK,QACL7N,QAAS,WAzDR,IAACyF,EACpB2H,KADoB3H,EAyD8BhD,GAxDxB3D,GAAIuO,EAAoB,MACjDA,EAAoB5H,EAAK3G,KAoDV,SAKGsO,IAAqB3K,EAAM3D,GAC1B,cAAC,IAAD,IAEA,cAAC,IAAD,MAEU,IAXhB,SAaE,cAACgP,EAAA,EAAD,CACEpK,GAAI0J,IAAqB3K,EAAM3D,GAC/BiP,QAAQ,OACRC,eAAa,EAHf,SAKE,eAACtN,EAAA,EAAD,CAAKkJ,OAAQ,EAAb,UACE,cAAC3F,EAAA,EAAD,CACErD,QAAQ,KACRsD,cAAY,EACZ6F,UAAU,MAHZ,4BAOA,cAACkE,EAAA,EAAD,CAAOJ,KAAK,QAAQD,aAAW,iBAA/B,SACE,cAACM,EAAA,EAAD,UACGzL,EAAMzE,eAAe4G,OACpBnC,EAAMzE,eAAeyB,KAAI,SAACgG,GAAD,OACvB,eAAC0I,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWrE,UAAU,KAAKsE,MAAM,MAAhC,SACG5I,EAAKlF,OAER,cAAC6N,EAAA,EAAD,CAAWrJ,MAAM,QAAjB,SACGU,EAAKhF,UALKgF,EAAK3G,OAUtB,cAACmF,EAAA,EAAD,CACErD,QAAQ,KACRsD,cAAY,EACZ6F,UAAU,MAHZ,oDAchB,cAAC5F,EAAA,EAAD,MAtEkC1B,EAAM3D,UA0EhD,cAACqF,EAAA,EAAD,IACA,cAAC2B,EAAA,EAAD,UACE,cAACnF,EAAA,EAAD,CACEK,MAAM,UACNhB,QAAS,WACPA,KAEFiJ,WAAS,EACTrI,QAAQ,OANV","file":"static/js/16.403637d7.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Box, Button } from '@material-ui/core';\nimport { green } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    display:'flex',\n    flexDirection:'column',\n  },\n  buttonBox:{\n    display:'flex',\n    flexDirection:'row',\n    justifyContent:'space-between'\n  },\n  backButton:{\n    backgroundColor: theme.colors.red,\n  },\n  addButton:{\n    backgroundColor: green[500],\n  }\n}));\n\nexport default function CustomisationList({customisations, onSelect, onDone, onCancel, selected}) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([0]);\n\n  const handleToggle = (value)=> {\n    const currentIndex = checked.indexOf(value.id);\n    const newChecked = [...checked];\n    if (currentIndex === -1) {\n      newChecked.push(value.id);\n      onSelect(value,'add')\n    } else {\n      newChecked.splice(currentIndex, 1);\n      onSelect(value,'remove')\n    }\n\n    setChecked(newChecked);\n  };\n\n  useEffect(()=>{\n    selected.forEach(customisation =>{\n    if(customisation.id)\n        handleToggle(customisation)\n    })\n  },[selected])\n\n  return (\n    <List className={classes.root}>\n                  <ListItemText  primary={\"Available addons\"} />\n\n      {customisations.map((customisation) => {\n        const labelId = `checkbox-list-label-${customisation.id}`;\n\n        return (\n          <ListItem key={customisation.id} role={undefined} dense button onClick={()=>{handleToggle(customisation)}}>\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={checked.indexOf(customisation.id) !== -1}\n                tabIndex={-1}\n                disableRipple\n                inputProps={{ 'aria-labelledby': labelId }}\n              />\n            </ListItemIcon>\n            <ListItemText primary={customisation.name} />\n            <ListItemSecondaryAction>\n            <ListItemText  primary={customisation.price} />\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n      <Box className={classes.buttonBox}>\n      <Button className={classes.backButton} onClick={()=>{onCancel()}} variant=\"contained\">Go back</Button>\n\n      <Button className={classes.addButton} onClick={()=>{onDone(false)}} variant=\"contained\">Add to cart</Button>\n\n      </Box>\n    </List>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Divider,\n  Grid,\n  Typography,\n  CardMedia,\n  makeStyles,\n  Button,\n  Grow,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AttentionSeeker } from \"react-awesome-reveal\";\nimport { addProductToOrder, removeProductFromOrder } from \"../../actions\";\nimport ControlPointIcon from \"@material-ui/icons/ControlPoint\";\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\nimport CustomisationList from \"./CustomisationList\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: 140,\n  },\n  button: {\n    border: \"1px solid black\",\n    color: theme.palette.text.primary,\n    \"&:hover\": {\n      color: \"green\",\n      \"& .MuiButton-endIcon\": {\n        fill: \"black\",\n        transform: \"translateX(3px)\",\n        transition: \"all 0.2s ease\",\n      },\n    },\n  },\n  customisationButton: {\n    fontSize: \".6rem\",\n    width: \"13rem\",\n    lineHeight: \".1rem\",\n    marginBottom: \"1rem\",\n  },\n  productName: {\n    color: theme.palette.text.primary,\n    fontSize: \"1.6rem\",\n    fontWeight: \"750\",\n    lineHeight: \"1.8rem\",\n  },\n  productCard: {\n    marginBottom: \".7rem\",\n    \"&:hover\": {\n      boxShadow:\n        \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    },\n  },\n  focused: {\n    backgroundColor: \"#f1faee\",\n  },\n  productCardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  price: {\n    color: theme.palette.text.primary,\n    fontSize: \"1rem\",\n  },\n  description: {\n    color: theme.palette.text.primary,\n    fontSize: \".7rem\",\n  },\n  addButton: {\n    fill: theme.colors.red,\n  },\n  removeButton: {\n    fill: theme.colors.green,\n  },\n}));\n\nconst ProductCard = ({ product }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const orderState = useSelector((state) => state.order) || {};\n  const selectedProducts = orderState.selectedProducts || [];\n  const selectedCustomisations = useRef([]);\n  const [enableCustomisation, setCustomisationStatus] = useState(false);\n  const orderedProduct = useRef({});\n  let selectedProduct =\n    selectedProducts.find((p) => {\n      return p.id === product.id;\n    }) || {};\n\n  const onAdd = (product) => {\n    const productClone = Object.assign({}, product);\n    productClone.quantity = 1;\n    productClone.price = product.price;\n    orderedProduct.current = productClone;\n    if (productClone.customisation.length) setCustomisationStatus(true);\n    else {\n      onFinalAdd();\n    }\n  };\n\n  const onFinalAdd = () => {\n    orderedProduct.current.customisations = selectedCustomisations.current;\n    dispatch(addProductToOrder(orderedProduct.current));\n    orderedProduct.current = {};\n    selectedCustomisations.current = [];\n    setCustomisationStatus(false);\n  };\n  const onRemove = (product) => {\n    const productClone = Object.assign({}, product);\n    productClone.customisations = [];\n    dispatch(removeProductFromOrder(productClone));\n  };\n  const onCusmisationSelect = (customisation, requiredChange) => {\n    if (requiredChange === \"add\") {\n      selectedCustomisations.current = [\n        ...selectedCustomisations.current,\n        customisation,\n      ];\n    } else if (requiredChange === \"remove\") {\n      selectedCustomisations.current = selectedCustomisations.current.filter(\n        (e) => e.id !== customisation.id\n      );\n    }\n  };\n\n  return (\n    <AttentionSeeker effect=\"pulse\">\n      <Card\n        className={\n          enableCustomisation\n            ? clsx(classes.productCard, classes.focused)\n            : classes.productCard\n        }\n      >\n        <CardContent className={classes.productCardContent}>\n          {enableCustomisation ? (\n            <Grow in={true}>\n            <CustomisationList\n              selected={selectedCustomisations.current}\n              customisations={product.customisation}\n              onDone={onFinalAdd}\n              onCancel={()=>{setCustomisationStatus(false)}}\n              onSelect={onCusmisationSelect}\n            /></Grow>\n          ) : (\n            <Box>\n              {product.image && (\n                <CardMedia\n                  image={product.image}\n                  title={product.name}\n                  className={classes.media}\n                />\n              )}\n              <Typography gutterBottom className={classes.productName}>\n                {product.name}\n              </Typography>\n\n              <Typography className={classes.price}>\n                Rs {product.price}\n              </Typography>\n              <Typography className={classes.description}>\n                {product.description}\n              </Typography>\n            </Box>\n          )}\n        </CardContent>\n        <Divider />\n        <Box p={2}>\n          {!enableCustomisation ? (\n            <Grid container justify=\"space-between\" spacing={2}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => {\n                  onAdd(product);\n                }}\n                className={classes.button}\n                endIcon={<ControlPointIcon className={classes.removeButton} />}\n              >\n                Add\n              </Button>\n\n              <Typography\n                align=\"center\"\n                color=\"textPrimary\"\n                gutterBottom\n                style={{ fontSize: \"1rem\" }}\n              >\n                {((selectedProduct && selectedProduct.quantity) || 0) + \" Nos\"}\n              </Typography>\n\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => {\n                  onRemove(product);\n                }}\n                className={classes.button}\n                endIcon={\n                  <IndeterminateCheckBoxIcon className={classes.addButton} />\n                }\n              >\n                Remove\n              </Button>\n            </Grid>\n          ) : null}\n        </Box>\n      </Card>\n    </AttentionSeeker>\n  );\n};\n\nProductCard.propTypes = {\n  product: PropTypes.object.isRequired,\n};\n\nexport default ProductCard;\n","import React from \"react\";\n\nimport {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { addProductToOrder, removeProductFromOrder } from \"../../actions\";\nimport ControlPointIcon from \"@material-ui/icons/ControlPoint\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { Fade } from \"react-awesome-reveal\";\n\nconst useStyles = makeStyles((theme) => ({\n  cartItems: {\n    width: \"5rem\",\n    fontSize: \".7rem\",\n  },\n  addButton: {\n    fill: theme.colors.red,\n    '&:hover':{\n      fill:'black',\n    },\n    cursor: 'pointer'\n  },\n  removeButton: {\n    fill: theme.colors.green,\n    '&:hover':{\n      fill:'black'\n    },\n    cursor: 'pointer'\n  },\n  actionsCard: {\n    display: \"flex\",\n    padding: \".5rem\",\n    background: \"#eae9e92b\",\n  },\n}));\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const onAdd = (product) => {\n    const productClone = Object.assign({}, product);\n    productClone.quantity = 1;\n    productClone.cartItemPanel = true;\n    dispatch(addProductToOrder(productClone));\n  };\n\n  const onRemove = (product) => {\n    dispatch(removeProductFromOrder(product));\n  };\n\n  return (\n    <Grid item xs={12}>\n      <Fade>\n        <Card>\n          <CardContent style={{ padding: \"unset\" }}>\n            <Box p={2}>\n              <Grid container justify=\"space-between\" spacing={1}>\n                <Grid item xs={5}>\n                  <Typography noWrap>{item.name}</Typography>\n                </Grid>\n                <Grid\n                  xs={4}\n                  item\n                >\n                  <Card className={classes.actionsCard}>\n                    <ControlPointIcon\n                      onClick={() => onAdd(item)}\n                      className={classes.addButton}\n                    />\n                    <Typography\n                      className={classes.cartItems}\n                      variant=\"h5\"\n                      align=\"center\"\n                    >\n                      {item.quantity}\n                    </Typography>\n                    <RemoveIcon\n                      onClick={() => onRemove(item)}\n                      className={classes.removeButton}\n                    />\n                  </Card>\n                </Grid>\n                <Grid item xs={3}>\n                  <Typography gutterBottom variant=\"h5\">\n                    $ {item.cost}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Box>\n          </CardContent>\n          <CardActions></CardActions>\n        </Card>\n      </Fade>\n    </Grid>\n  );\n};\nexport default CartItem;\n","import React, { useState } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport {\n  AccordionActions,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { Fade } from \"react-awesome-reveal\";\n\nimport CartItem from \"./CartItem\";\nimport { addOrder, initiateOrderAdd } from \"../../actions\";\nimport { Plus } from \"react-feather\";\nimport { green, red } from \"@material-ui/core/colors\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  emptyCart: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  emptyCartImage: {\n    width: \"10rem\",\n    alignSelf: \"center\",\n  },\n  emptyCartText: {\n    color: theme.palette.text.primary,\n    fontSize: \"1.2rem\",\n    alignSelf: \"center\",\n    paddingBottom: \"1rem\",\n  },\n  cartTitle: {\n    color: theme.palette.text.primary,\n    fontSize: \"1.4rem\",\n    padding: \"1rem\",\n    fontWeight: 800,\n  },\n  cartTitleMobile: {\n    color: theme.palette.text.primary,\n    fontSize: \"1rem\",\n    padding: \"1rem\",\n    fontWeight: 800,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  orderButton: {\n    backgroundColor: theme.colors.green,\n  },\n  orderBox: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"33.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: theme.spacing(1, 2),\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n}));\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const orderState = useSelector((state) => state.order) || {};\n  const tableState = useSelector((state) => state.table) || {};\n  const selectedProducts = orderState.selectedProducts || [];\n  const [cartClicked, setCartClicked] = useState(false);\n  const orderedProducts =\n    selectedProducts\n      .map((product) => product[\"items\"])\n      .reduce((product1, product2) => product1.concat(product2), []) || [];\n  const classes = useStyles();\n  let totalCost = 0;\n  orderedProducts.forEach((product) => {\n    const productTotalPrice =\n      product.customisations.reduce(\n        (customisation1, customisation2) =>\n          customisation1 + customisation2.price,\n        0\n      ) + product.price;\n    if (product.quantity > 1)\n      totalCost = totalCost + productTotalPrice * product.quantity;\n    else {\n      totalCost = totalCost + productTotalPrice;\n    }\n  });\n  const goBack = ()=>{\n    dispatch(initiateOrderAdd(false))\n  }\n  const placeOrder = () => {\n    const order = {};\n    let productsInOrder = orderedProducts.slice(0);\n    productsInOrder = productsInOrder.map((product) => {\n      let productClone = Object.assign({}, product);\n      productClone.customisations = product.customisations.map(\n        (customisation) => {\n          return customisation.id;\n        }\n      );\n      return productClone;\n    });\n    order.tableId = tableState.selectedTable.id;\n    order.products = productsInOrder;\n    order.price = totalCost;\n    order.status = \"ordered\";\n    dispatch(addOrder(order));\n  };\n  const renderCart = () => {\n    if (isMobile) {\n      return (\n        <Grid container justify=\"center\" fullWidth={true}>\n          {cartClicked ? (\n            <Card\n              style={{\n                bottom: \"0\",\n                position: \"fixed\",\n                width: \"90%\",\n                maxHeight: \"70vh\",\n                overflow: \"scroll\",\n              }}\n            >\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon  onClick={() => {\n                  setCartClicked(!cartClicked);\n                }} />}\n              >\n                <Typography className={classes.cartTitleMobile}>\n                  Items in your cart\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails className={classes.details}>\n                <Card\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    width: \"100%\",\n                  }}\n                >\n                  {orderedProducts.map((item, index) => {\n                    return <CartItem key={item.id + index} item={item} />;\n                  })}\n                </Card>\n              </AccordionDetails>\n              <Divider />\n              <AccordionActions style={{display:'flex', justifyContent:'space-between'}}>\n              <Typography gutterBottom variant=\"h5\">\n                      Total Cost: {totalCost}\n                    </Typography>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => {\n                        placeOrder();\n                      }}\n                      disabled={!selectedProducts.length}\n                      className={classes.orderButton}\n                      endIcon={<Plus />}\n                    >\n                      Place Order\n                    </Button>\n              </AccordionActions>\n            </Card>\n          ) : (\n            <Box style={{display:'flex', justifyContent:'center',  bottom: \"0\",\n            position: \"fixed\"}}>\n              <Button\n              style={{\n                background: red[500],\n                margin:'1rem'\n              }}\n              variant=\"contained\"\n              onClick={() => {\n                goBack();\n              }}\n            >\n              Go back\n            </Button>\n            <Button\n              style={{\n                background: green[500],\n                margin:'1rem'\n              }}\n              variant=\"contained\"\n              onClick={() => {\n                setCartClicked(!cartClicked);\n              }}\n            >\n              Cart\n            </Button>\n            \n            </Box>\n          )}\n        </Grid>\n      );\n    }\n\n    return (\n      <Box\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          minHeight: \"20vh\",\n          width:'30%'\n        }}\n      >\n          <Typography gutterBottom className={classes.cartTitle} component=\"h2\">\n            Items in your cart\n          </Typography>\n          {selectedProducts.length === 0 && (\n            <Box className={classes.emptyCart}>\n              <img\n                alt=\"empty-cart\"\n                src=\"/images/empty-plate.png\"\n                className={classes.emptyCartImage}\n              />\n              <Typography\n                variant=\"h5\"\n                component=\"h2\"\n                className={classes.emptyCartText}\n              >\n                Uh, oh! your cart looks empty\n              </Typography>\n            </Box>\n          )}\n          {orderedProducts.map((item, index) => {\n            return <CartItem key={item.id + index} item={item} />;\n          })}\n          <Divider />\n          {selectedProducts.length > 0 ? (\n            <Grid item xs={12}>\n              <Fade>\n                <CardContent>\n                  <Box className={classes.orderBox}>\n                    <Typography gutterBottom variant=\"h5\">\n                      Total Cost: {totalCost}\n                    </Typography>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => {\n                        placeOrder();\n                      }}\n                      disabled={!selectedProducts.length}\n                      className={classes.orderButton}\n                      endIcon={<Plus />}\n                    >\n                      Place Order\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Fade>\n            </Grid>\n          ) : (\n            <div></div>\n          )}\n      </Box>\n    );\n  };\n\n  return renderCart();\n};\nexport default Cart;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Box,\n  Button,\n  CardContent,\n  FormControl,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  SvgIcon,\n  TextField,\n} from \"@material-ui/core\";\nimport { Search as SearchIcon } from \"react-feather\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getTopProductsOfBranch } from \"../../actions\";\nimport ProductCard from \"./ProductCard\";\nimport Cart from \"./Cart\";\nconst useStyles = makeStyles((theme) => ({\n  sortBy: {\n    width: \"10rem\",\n  },\n  helperBox: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginTop: \"1rem\",\n    justifyContent: \"space-between\",\n  },\n  button: {\n    width: \"9rem\",\n    fontSize: \".9rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst Order = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const productState = useSelector((state) => state.product);\n  const [products, setProducts] = useState([]);\n  const [sortBy, setSort] = useState(\"\");\n  const searchBy = useRef(\"\");\n\n  const branchState = useSelector((state) => state.branch);\n  const topProductsOfBranch = (branchState && branchState.topProducts) || [];\n  const productsInState = (productState && productState.products) || [];\n  const handleSearch = (value) => {\n    searchBy.current = value;\n    setProducts(\n      productsInState.filter((product) => {\n        return product.name.toLowerCase().includes(value.toLowerCase());\n      })\n    );\n  };\n\n  const sortItems = (sort) => {\n    let productsClone = products.slice(0);\n    setSort(sort);\n    if (productsClone.length > 1) {\n      if (searchBy.current) {\n        productsClone = productsClone.filter((product) => {\n          return product.name\n            .toLowerCase()\n            .includes(searchBy.current.toLowerCase());\n        });\n      }\n      switch (sort) {\n        case \"ascending\":\n          setProducts(\n            productsClone.sort((prod1, prod2) => prod1.price - prod2.price)\n          );\n          break;\n        case \"descending\":\n          setProducts(\n            productsClone.sort((prod1, prod2) => prod2.price - prod1.price)\n          );\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  const handleTopProductsClick = () => {\n    setProducts(topProductsOfBranch);\n  };\n\n  useEffect(() => {\n    dispatch(getTopProductsOfBranch());\n  }, []);\n\n  useEffect(() => {\n    handleSearch(\"\");\n    setProducts(productsInState);\n  }, [productsInState]);\n\n  return (\n    <Grid container maxWidth={true}>\n      <Grid style={{ marginRight: \"1rem\" }} item lg={7}>\n        <Box>\n          <CardContent>\n            <TextField\n              fullWidth\n              onChange={(event) => {\n                handleSearch(event.target.value);\n              }}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SvgIcon fontSize=\"small\" color=\"action\">\n                      <SearchIcon />\n                    </SvgIcon>\n                  </InputAdornment>\n                ),\n              }}\n              placeholder=\"Search for dishes\"\n              variant=\"outlined\"\n              value={searchBy.current}\n            />\n            <Box className={classes.helperBox}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  handleTopProductsClick();\n                }}\n                className={classes.button}\n              >\n                Top ordered\n              </Button>\n              <FormControl className={classes.sortBy} variant=\"outlined\">\n                <InputLabel id=\"demo-simple-select-outlined-label\">\n                  Sort by\n                </InputLabel>\n                <Select\n                  value={sortBy}\n                  onChange={(event) => {\n                    sortItems(event.target.value);\n                  }}\n                  label=\"Sort by\"\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  <MenuItem value={\"ascending\"}>Price low to high</MenuItem>\n                  <MenuItem value={\"descending\"}>Price high to low</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </CardContent>\n        </Box>\n        <Grid\n          style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}\n        >\n          {products.map((p, index) => (\n            <Grid item key={p.id + index} lg={6} xs={12}>\n              <ProductCard product={p} />\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      <Cart />\n    </Grid>\n  );\n};\n\nOrder.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default Order;\n","import React, { useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Divider,\n  Typography,\n  makeStyles,\n  Container,\n  TableRow,\n  TableCell,\n  TableBody,\n  Table,\n  IconButton,\n  Collapse,\n  Grid,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Order from \"./Order\";\nimport {\n  getOrderByTableId,\n  getProducts,\n  initiateOrderAdd,\n} from \"../../actions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {width:'100%', display:'flex',flexDirection:'column'},\n  productName: {\n    color: theme.palette.text.primary,\n    fontSize: \"1.6rem\",\n    fontWeight: \"750\",\n    lineHeight: \"1.8rem\",\n  },\n  card: {\n    marginBottom: \".7rem\",\n    \"&:hover\": {\n      boxShadow:\n        \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\n    },\n  },\n  content: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  price: {\n    color: theme.palette.text.primary,\n    fontSize: \"1rem\",\n    margin:'.5rem'\n  },\n  quantity: {\n    color: theme.palette.text.primary,\n    fontSize: \"1rem\",\n    margin:'.5rem'\n  },\n  status: {\n    color: theme.palette.text.primary,\n    fontSize: \"1rem\",\n    margin:'.5rem',\n    background:'yellow',\n    fontWeight:'600'\n  },\n  detailsBox: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  topButton : {\n    alignSelf:'center',\n    width:'15rem'\n  }\n}));\n\nconst TableView = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const orderState = useSelector((state) => state.order) || {};\n  const tableState = useSelector((state) => state.table);\n  const table = (tableState && tableState.selectedTable) || {};\n  const orders = orderState.orders || [];\n  const activeOrders = orders\n    .map((order) => {\n      return order.orderItems;\n    })\n    .reduce((item1, item2) => {\n      return item1.concat(item2);\n    }, []);\n\n  const [openRowProductId, setOpenRowProductId] = React.useState({ id: null });\n  const toggleProductRow = (item) => {\n    if (openRowProductId === item.id) setOpenRowProductId(null);\n    else setOpenRowProductId(item.id);\n  };\n  useEffect(() => {\n    if (table.id) {\n      dispatch(getOrderByTableId(table.id));\n    }\n  }, [dispatch, table]);\n  const onClick = () => {\n    dispatch(getProducts());\n    dispatch(initiateOrderAdd(true));\n  };\n  return (\n    <Container maxWidth={true}>\n      {orderState && orderState.add ? (\n        <Order table={table} />\n      ) : (\n        <Grid item xs={12} className={classes.content}>\n              <Button\n              color=\"primary\"\n              onClick={() => {\n                onClick();\n              }}\n              variant=\"contained\"\n              className={classes.topButton}\n            >\n              Place another order\n            </Button>\n          <CardContent className={classes.root}>\n              <Typography color=\"textPrimary\" gutterBottom variant=\"h3\">\n                {table.name}\n              </Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\">\n                {`${table.branchName}`}\n              </Typography>\n              {activeOrders.map((order) => (\n                <Card className={classes.card} key={order.id}>\n                  <CardContent>\n                      <Typography gutterBottom className={classes.productName}>\n                        {order.productName}\n                      </Typography>\n                      <Box className={classes.detailsBox}>\n                      <Typography className={classes.price}>\n                        Rs {order.price}\n                      </Typography>\n                      <Typography className={classes.quantity}>\n                        {order.quantity} Nos\n                      </Typography>\n                      <Typography className={classes.status}>\n                        {order.status}\n                      </Typography>\n                      </Box>\n                      <Box>\n                        <IconButton\n                          aria-label=\"expand row\"\n                          size=\"small\"\n                          onClick={() => toggleProductRow(order)}\n                        >\n                          {openRowProductId === order.id ? (\n                            <KeyboardArrowUpIcon />\n                          ) : (\n                            <KeyboardArrowDownIcon />\n                          )}\n                        </IconButton>{\" \"}\n                        Addons\n                        <Collapse\n                          in={openRowProductId === order.id}\n                          timeout=\"auto\"\n                          unmountOnExit\n                        >\n                          <Box margin={1}>\n                            <Typography\n                              variant=\"h6\"\n                              gutterBottom\n                              component=\"div\"\n                            >\n                              Customisations\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"customisations\">\n                              <TableBody>\n                                {order.customisations.length ? (\n                                  order.customisations.map((item) => (\n                                    <TableRow key={item.id}>\n                                      <TableCell component=\"th\" scope=\"row\">\n                                        {item.name}\n                                      </TableCell>\n                                      <TableCell align=\"right\">\n                                        {item.price}\n                                      </TableCell>\n                                    </TableRow>\n                                  ))\n                                ) : (\n                                  <Typography\n                                    variant=\"h6\"\n                                    gutterBottom\n                                    component=\"div\"\n                                  >\n                                    No Customisations added\n                                  </Typography>\n                                )}\n                              </TableBody>\n                            </Table>\n                          </Box>\n                        </Collapse>\n                      </Box>\n                  </CardContent>\n                  <Divider />\n                </Card>\n              ))}\n          </CardContent>\n          <Divider />\n          <CardActions>\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                onClick();\n              }}\n              fullWidth\n              variant=\"text\"\n            >\n              Place another order\n            </Button>\n          </CardActions>\n        </Grid>\n      )}\n    </Container>\n  );\n};\n\nexport default TableView;\n"],"sourceRoot":""}