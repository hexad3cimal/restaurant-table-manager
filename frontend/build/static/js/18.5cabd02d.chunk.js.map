{"version":3,"sources":["components/Page.js","views/DashboardView/LatestOrders.js","views/DashboardView/Orders.js","views/DashboardView/Cost.js","views/DashboardView/Products.js","views/DashboardView/index.js"],"names":["Page","forwardRef","ref","children","title","rest","propTypes","PropTypes","node","isRequired","string","useStyles","makeStyles","root","display","flexDirection","noOrder","alignSelf","margin","LatestOrders","dispatch","useDispatch","classes","orderState","useSelector","state","order","orders","React","useState","id","openRowOrderId","setOpenRowOrderId","openRowProductId","setOpenRowProductId","useEffect","getOrders","Card","className","CardHeader","Divider","length","Box","minWidth","Table","TableHead","TableRow","TableCell","sortDirection","Tooltip","enterDelay","TableSortLabel","active","direction","TableBody","map","hover","refCode","branchName","IconButton","aria-label","size","onClick","item","Collapse","in","timeout","unmountOnExit","Typography","variant","gutterBottom","component","orderItems","scope","productName","quantity","price","toggleProductRow","align","customisations","name","moment","CreatedAt","format","Chip","color","label","status","justifyContent","p","Button","endIcon","theme","height","avatar","backgroundColor","colors","red","width","differenceIcon","differenceValue","marginRight","spacing","Orders","CardContent","Grid","container","justify","Avatar","mt","alignItems","Products","minHeight","paddingBottom","paddingTop","Dashboard","getDashboardStats","Container","maxWidth","lg","sm","xl","xs","Cost","md"],"mappings":"kKAIMA,EAAOC,sBAAW,WAAoCC,GAApC,IAAGC,EAAH,EAAGA,SAAH,IAAaC,aAAb,MAAqB,GAArB,EAA4BC,EAA5B,2CACtB,8CAAKH,IAAKA,GAASG,GAAnB,cACE,cAAC,IAAD,UACE,gCAAQD,MAETD,SAILH,EAAKM,UAAY,CACfH,SAAUI,IAAUC,KAAKC,WACzBL,MAAOG,IAAUG,QAGJV,O,0WCWTW,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CAAEC,QAAS,OAAQC,cAAe,UACxCC,QAAS,CAAEC,UAAW,SAAUC,OAAQ,YAsM3BC,EAnMM,WACnB,IAAMC,EAAWC,cACXC,EAAUX,IACVY,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAU,GACpDC,EAAUJ,GAAcA,EAAWI,QAAW,GAJ3B,EAKmBC,IAAMC,SAAS,CAAEC,GAAI,OALxC,mBAKlBC,EALkB,KAKFC,EALE,OAWuBJ,IAAMC,SAAS,CAAEC,GAAI,OAX5C,mBAWlBG,EAXkB,KAWAC,EAXA,KAmBzB,OAHAC,qBAAU,WACRf,EAASgB,iBACR,IAED,eAACC,EAAA,EAAD,CAAMC,UAAWhB,EAAQT,KAAzB,UACE,cAAC0B,EAAA,EAAD,CAAYnC,MAAM,kBAClB,cAACoC,EAAA,EAAD,IACCb,EAAOc,OAAS,EACf,cAAC,IAAD,UACE,eAACC,EAAA,EAAD,CAAKC,SAAU,IAAf,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAWC,cAAc,OAAzB,SACE,cAACC,EAAA,EAAD,CAASC,WAAY,IAAK9C,MAAM,OAAhC,SACE,cAAC+C,EAAA,EAAD,CAAgBC,QAAM,EAACC,UAAU,OAAjC,sBAKJ,cAACN,EAAA,EAAD,0BAGJ,cAACO,EAAA,EAAD,UACG3B,EAAO4B,KAAI,SAAC7B,GAAD,OACV,eAACoB,EAAA,EAAD,CAAUU,OAAK,EAAf,UACE,cAACT,EAAA,EAAD,UAAYrB,EAAM+B,UAClB,cAACV,EAAA,EAAD,UAAYrB,EAAMgC,aAClB,eAACX,EAAA,EAAD,WACE,cAACY,EAAA,EAAD,CACEC,aAAW,aACXC,KAAK,QACLC,QAAS,WA9CR,IAACC,EAClBhC,KADkBgC,EA8C4BrC,GA7CtBI,GAAIE,EAAkB,MAC7CA,EAAkB+B,EAAKjC,KAyCV,SAKGC,IAAmBL,EAAMI,GACxB,cAAC,IAAD,IAEA,cAAC,IAAD,MAEU,IAXhB,cAaE,cAACkC,EAAA,EAAD,CACEC,GAAIlC,IAAmBL,EAAMI,GAC7BoC,QAAQ,OACRC,eAAa,EAHf,SAKE,eAACzB,EAAA,EAAD,CAAKxB,OAAQ,EAAb,UACE,cAACkD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,UAAU,MAAhD,4BAGA,eAAC3B,EAAA,EAAD,CAAOiB,KAAK,QAAQD,aAAW,YAA/B,UACE,cAACf,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,kCAGJ,cAACO,EAAA,EAAD,UACG5B,EAAM8C,WAAWjB,KAAI,SAACQ,GAAD,OACpB,eAACjB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWwB,UAAU,KAAKE,MAAM,MAAhC,SACGV,EAAKW,cAER,cAAC3B,EAAA,EAAD,UAAYgB,EAAKY,WACjB,cAAC5B,EAAA,EAAD,UAAYgB,EAAKa,QACjB,eAAC7B,EAAA,EAAD,WACE,cAACY,EAAA,EAAD,CACEC,aAAW,aACXC,KAAK,QACLC,QAAS,kBA/EpB,SAACC,GACpB9B,IAAqB8B,EAAKjC,GAAII,EAAoB,MACjDA,EAAoB6B,EAAKjC,IA6EmB+C,CAAiBd,IAHlC,SAKG9B,IAAqB8B,EAAKjC,GACzB,cAAC,IAAD,IAEA,cAAC,IAAD,MAEU,IAXhB,SAaE,cAACkC,EAAA,EAAD,CACEC,GAAIhC,IAAqB8B,EAAKjC,GAC9BoC,QAAQ,OACRC,eAAa,EAHf,SAKE,eAACzB,EAAA,EAAD,CAAKxB,OAAQ,EAAb,UACE,cAACkD,EAAA,EAAD,CACEC,QAAQ,KACRC,cAAY,EACZC,UAAU,MAHZ,4BAOA,eAAC3B,EAAA,EAAD,CACEiB,KAAK,QACLD,aAAW,YAFb,UAIE,cAACf,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAW+B,MAAM,QAAjB,yBAKJ,cAACxB,EAAA,EAAD,UACGS,EAAKgB,eAAetC,OACnBsB,EAAKgB,eAAexB,KAClB,SAACQ,GAAD,OACE,eAACjB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEwB,UAAU,KACVE,MAAM,MAFR,SAIGV,EAAKiB,OAER,cAACjC,EAAA,EAAD,CAAW+B,MAAM,QAAjB,SACGf,EAAKa,UARKb,EAAKjC,OAcxB,cAACsC,EAAA,EAAD,CACEC,QAAQ,KACRC,cAAY,EACZC,UAAU,MAHZ,oDA9DCR,EAAKjC,oBAkFhC,cAACiB,EAAA,EAAD,UAAYrB,EAAMkD,QAClB,cAAC7B,EAAA,EAAD,UACGkC,IAAOvD,EAAMwD,WAAWC,OAAO,gBAElC,cAACpC,EAAA,EAAD,UACE,cAACqC,EAAA,EAAD,CAAMC,MAAM,UAAUC,MAAO5D,EAAM6D,OAAQ1B,KAAK,cA3H/BnC,EAAMI,YAiIjC,cAACY,EAAA,EAAD,CAAK5B,QAAQ,OAAO0E,eAAe,WAAWC,EAAG,EAAjD,SACE,cAACC,EAAA,EAAD,CACEL,MAAM,UACNM,QAAS,cAAC,IAAD,IACT9B,KAAK,QACLQ,QAAQ,OAJV,6BAYN,cAACD,EAAA,EAAD,CAAYC,QAAQ,KAAK/B,UAAWhB,EAAQN,QAA5C,+B,8DC/MFL,EAAYC,aAAW,SAACgF,GAAD,MAAY,CACvC/E,KAAM,CACJgF,OAAQ,QAEVC,OAAQ,CACNC,gBAAiBC,IAAOC,IAAI,KAC5BJ,OAAQ,GACRK,MAAO,IAETC,eAAgB,CACdd,MAAOW,IAAOC,IAAI,MAEpBG,gBAAiB,CACff,MAAOW,IAAOC,IAAI,KAClBI,YAAaT,EAAMU,QAAQ,QA2DhBC,EAvDA,WACb,IAAMjF,EAAUX,IAEhB,OACE,cAAC0B,EAAA,EAAD,UAEE,eAACmE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,gBACRL,QAAS,EAHX,UAKE,eAACG,EAAA,EAAD,CAAM1C,MAAI,EAAV,UACE,cAACK,EAAA,EAAD,CACEiB,MAAM,gBACNf,cAAY,EACZD,QAAQ,KAHV,sCAMA,cAACD,EAAA,EAAD,CACEiB,MAAM,cACNhB,QAAQ,KAFV,wBAOF,cAACoC,EAAA,EAAD,CAAM1C,MAAI,EAAV,SACE,cAAC6C,EAAA,EAAD,CAAQtE,UAAWhB,EAAQwE,OAA3B,SACE,cAAC,IAAD,WAIN,eAACpD,EAAA,EAAD,CACEmE,GAAI,EACJ/F,QAAQ,OACRgG,WAAW,SAHb,UAKE,cAAC,IAAD,CAAmBxE,UAAWhB,EAAQ6E,iBACtC,cAAC/B,EAAA,EAAD,CACE9B,UAAWhB,EAAQ8E,gBACnB/B,QAAQ,QAFV,iBAMA,cAACD,EAAA,EAAD,CACEiB,MAAM,gBACNhB,QAAQ,UAFV,uCC9DJ1D,EAAYC,aAAW,SAACgF,GAAD,MAAY,CACvC/E,KAAM,CACJgF,OAAQ,QAEVC,OAAQ,CACNC,gBAAiBC,IAAOC,IAAI,KAC5BJ,OAAQ,GACRK,MAAO,IAETC,eAAgB,CACdd,MAAOW,IAAOC,IAAI,MAEpBG,gBAAiB,CACff,MAAOW,IAAOC,IAAI,KAClBI,YAAaT,EAAMU,QAAQ,QA4DhBC,EAxDA,WACb,IAAMjF,EAAUX,IAEhB,OACE,cAAC0B,EAAA,EAAD,UAEE,eAACmE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,gBACRL,QAAS,EAHX,UAKE,eAACG,EAAA,EAAD,CAAM1C,MAAI,EAAV,UACE,cAACK,EAAA,EAAD,CACEiB,MAAM,gBACNf,cAAY,EACZD,QAAQ,KAHV,yBAOA,cAACD,EAAA,EAAD,CACEiB,MAAM,cACNhB,QAAQ,KAFV,wBAOF,cAACoC,EAAA,EAAD,CAAM1C,MAAI,EAAV,SACE,cAAC6C,EAAA,EAAD,CAAQtE,UAAWhB,EAAQwE,OAA3B,SACE,cAAC,IAAD,WAIN,eAACpD,EAAA,EAAD,CACEmE,GAAI,EACJ/F,QAAQ,OACRgG,WAAW,SAHb,UAKE,cAAC,IAAD,CAAmBxE,UAAWhB,EAAQ6E,iBACtC,cAAC/B,EAAA,EAAD,CACE9B,UAAWhB,EAAQ8E,gBACnB/B,QAAQ,QAFV,iBAMA,cAACD,EAAA,EAAD,CACEiB,MAAM,gBACNhB,QAAQ,UAFV,uCC/DJ1D,EAAYC,aAAW,SAACgF,GAAD,MAAY,CACvC/E,KAAM,CACJgF,OAAQ,QAEVC,OAAQ,CACNC,gBAAiBC,IAAOC,IAAI,KAC5BJ,OAAQ,GACRK,MAAO,IAETC,eAAgB,CACdd,MAAOW,IAAOC,IAAI,MAEpBG,gBAAiB,CACff,MAAOW,IAAOC,IAAI,KAClBI,YAAaT,EAAMU,QAAQ,QA4DhBS,EAxDE,WACf,IAAMzF,EAAUX,IAEhB,OACE,cAAC0B,EAAA,EAAD,UAEE,eAACmE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,gBACRL,QAAS,EAHX,UAKE,eAACG,EAAA,EAAD,CAAM1C,MAAI,EAAV,UACE,cAACK,EAAA,EAAD,CACEiB,MAAM,gBACNf,cAAY,EACZD,QAAQ,KAHV,sBAOA,cAACD,EAAA,EAAD,CACEiB,MAAM,cACNhB,QAAQ,KAFV,wBAOF,cAACoC,EAAA,EAAD,CAAM1C,MAAI,EAAV,SACE,cAAC6C,EAAA,EAAD,CAAQtE,UAAWhB,EAAQwE,OAA3B,SACE,cAAC,IAAD,WAIN,eAACpD,EAAA,EAAD,CACEmE,GAAI,EACJ/F,QAAQ,OACRgG,WAAW,SAHb,UAKE,cAAC,IAAD,CAAmBxE,UAAWhB,EAAQ6E,iBACtC,cAAC/B,EAAA,EAAD,CACE9B,UAAWhB,EAAQ8E,gBACnB/B,QAAQ,QAFV,iBAMA,cAACD,EAAA,EAAD,CACEiB,MAAM,gBACNhB,QAAQ,UAFV,uC,SCnEJ1D,GAAYC,aAAW,SAACgF,GAAD,MAAY,CACvC/E,KAAM,CACJmG,UAAW,OACXC,cAAerB,EAAMU,QAAQ,GAC7BY,WAAYtB,EAAMU,QAAQ,QA+Bfa,UA3BG,WAChB,IAAM7F,EAAUX,KAIhB,OAHiBU,aAEjBD,CAASgG,gBAEP,cAACpH,EAAA,EAAD,CAAMsC,UAAWhB,EAAQT,KAAMT,MAAM,YAArC,SACE,cAACiH,EAAA,EAAD,CAAWC,UAAU,EAArB,SACE,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACJ,QAAS,EAAzB,UACE,cAACG,EAAA,EAAD,CAAM1C,MAAI,EAACwD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,EAAD,MAEF,cAACjB,EAAA,EAAD,CAAM1C,MAAI,EAACwD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAAC,EAAD,MAEF,cAACjB,EAAA,EAAD,CAAM1C,MAAI,EAACwD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAApC,SACE,cAACC,EAAD,MAEF,cAAClB,EAAA,EAAD,CAAM1C,MAAI,EAAC6D,GAAI,GAAf,SACE,cAAC,EAAD","file":"static/js/18.5cabd02d.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\n\nconst Page = forwardRef(({ children, title = '', ...rest }, ref) => (\n  <div ref={ref} {...rest}>\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n    {children}\n  </div>\n));\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Page;\n","import React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n  makeStyles,\n  Typography,\n  Collapse,\n  IconButton,\n} from \"@material-ui/core\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getOrders } from \"../../actions/order\";\n\nconst useStyles = makeStyles(() => ({\n  root: { display: \"flex\", flexDirection: \"column\" },\n  noOrder: { alignSelf: \"center\", margin: \"5rem\" },\n}));\n\nconst LatestOrders = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const orderState = useSelector((state) => state.order) || {};\n  const orders = (orderState && orderState.orders) || [];\n  const [openRowOrderId, setOpenRowOrderId] = React.useState({ id: null });\n  const toggleOrderRow = (item) => {\n    if (openRowOrderId === item.id) setOpenRowOrderId(null);\n    else setOpenRowOrderId(item.id);\n  };\n\n  const [openRowProductId, setOpenRowProductId] = React.useState({ id: null });\n  const toggleProductRow = (item) => {\n    if (openRowProductId === item.id) setOpenRowProductId(null);\n    else setOpenRowProductId(item.id);\n  };\n  useEffect(() => {\n    dispatch(getOrders());\n  }, []);\n  return (\n    <Card className={classes.root}>\n      <CardHeader title=\"Latest Orders\" />\n      <Divider />\n      {orders.length > 0 ? (\n        <PerfectScrollbar>\n          <Box minWidth={800}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Order Ref</TableCell>\n                  <TableCell>Branch</TableCell>\n                  <TableCell>Product</TableCell>\n                  <TableCell>Cost</TableCell>\n                  <TableCell sortDirection=\"desc\">\n                    <Tooltip enterDelay={300} title=\"Sort\">\n                      <TableSortLabel active direction=\"desc\">\n                        Date\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                  <TableCell>Status</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {orders.map((order) => (\n                  <TableRow hover key={order.id}>\n                    <TableCell>{order.refCode}</TableCell>\n                    <TableCell>{order.branchName}</TableCell>\n                    <TableCell>\n                      <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => toggleOrderRow(order)}\n                      >\n                        {openRowOrderId === order.id ? (\n                          <KeyboardArrowUpIcon />\n                        ) : (\n                          <KeyboardArrowDownIcon />\n                        )}\n                      </IconButton>{\" \"}\n                      Order Items\n                      <Collapse\n                        in={openRowOrderId === order.id}\n                        timeout=\"auto\"\n                        unmountOnExit\n                      >\n                        <Box margin={1}>\n                          <Typography variant=\"h6\" gutterBottom component=\"div\">\n                            Items in Order\n                          </Typography>\n                          <Table size=\"small\" aria-label=\"purchases\">\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Quantity</TableCell>\n                                <TableCell>Amount</TableCell>\n                                <TableCell>Customisations</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {order.orderItems.map((item) => (\n                                <TableRow key={item.id}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                    {item.productName}\n                                  </TableCell>\n                                  <TableCell>{item.quantity}</TableCell>\n                                  <TableCell>{item.price}</TableCell>\n                                  <TableCell>\n                                    <IconButton\n                                      aria-label=\"expand row\"\n                                      size=\"small\"\n                                      onClick={() => toggleProductRow(item)}\n                                    >\n                                      {openRowProductId === item.id ? (\n                                        <KeyboardArrowUpIcon />\n                                      ) : (\n                                        <KeyboardArrowDownIcon />\n                                      )}\n                                    </IconButton>{\" \"}\n                                    Addons\n                                    <Collapse\n                                      in={openRowProductId === item.id}\n                                      timeout=\"auto\"\n                                      unmountOnExit\n                                    >\n                                      <Box margin={1}>\n                                        <Typography\n                                          variant=\"h6\"\n                                          gutterBottom\n                                          component=\"div\"\n                                        >\n                                          Customisations\n                                        </Typography>\n                                        <Table\n                                          size=\"small\"\n                                          aria-label=\"purchases\"\n                                        >\n                                          <TableHead>\n                                            <TableRow>\n                                              <TableCell>Name</TableCell>\n                                              <TableCell align=\"right\">\n                                                Amount\n                                              </TableCell>\n                                            </TableRow>\n                                          </TableHead>\n                                          <TableBody>\n                                            {item.customisations.length ? (\n                                              item.customisations.map(\n                                                (item) => (\n                                                  <TableRow key={item.id}>\n                                                    <TableCell\n                                                      component=\"th\"\n                                                      scope=\"row\"\n                                                    >\n                                                      {item.name}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                      {item.price}\n                                                    </TableCell>\n                                                  </TableRow>\n                                                )\n                                              )\n                                            ) : (\n                                              <Typography\n                                                variant=\"h6\"\n                                                gutterBottom\n                                                component=\"div\"\n                                              >\n                                                No Customisations added\n                                              </Typography>\n                                            )}\n                                          </TableBody>\n                                        </Table>\n                                      </Box>\n                                    </Collapse>\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </Box>\n                      </Collapse>\n                    </TableCell>\n                    <TableCell>{order.price}</TableCell>\n                    <TableCell>\n                      {moment(order.CreatedAt).format(\"DD/MM/YYYY\")}\n                    </TableCell>\n                    <TableCell>\n                      <Chip color=\"primary\" label={order.status} size=\"small\" />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n              <Button\n                color=\"primary\"\n                endIcon={<ArrowRightIcon />}\n                size=\"small\"\n                variant=\"text\"\n              >\n                View all\n              </Button>\n            </Box>\n          </Box>\n        </PerfectScrollbar>\n      ) : (\n        <Typography variant=\"h3\" className={classes.noOrder}>\n          No orders yet\n        </Typography>\n      )}\n    </Card>\n  );\n};\n\nexport default LatestOrders;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport MoneyIcon from '@material-ui/icons/Money';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.red[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.red[900]\n  },\n  differenceValue: {\n    color: colors.red[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Orders = () => {\n  const classes = useStyles();\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\nTotal Orders            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              $24,000\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <MoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowDownwardIcon className={classes.differenceIcon} />\n          <Typography\n            className={classes.differenceValue}\n            variant=\"body2\"\n          >\n            12%\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            Since last month\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\nexport default Orders;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport MoneyIcon from '@material-ui/icons/Money';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.red[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.red[900]\n  },\n  differenceValue: {\n    color: colors.red[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Orders = () => {\n  const classes = useStyles();\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              Total Sales\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              $24,000\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <MoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowDownwardIcon className={classes.differenceIcon} />\n          <Typography\n            className={classes.differenceValue}\n            variant=\"body2\"\n          >\n            12%\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            Since last month\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\nexport default Orders;\n","import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport MoneyIcon from '@material-ui/icons/Money';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%'\n  },\n  avatar: {\n    backgroundColor: colors.red[600],\n    height: 56,\n    width: 56\n  },\n  differenceIcon: {\n    color: colors.red[900]\n  },\n  differenceValue: {\n    color: colors.red[900],\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Products = () => {\n  const classes = useStyles();\n\n  return (\n    <Card\n    >\n      <CardContent>\n        <Grid\n          container\n          justify=\"space-between\"\n          spacing={3}\n        >\n          <Grid item>\n            <Typography\n              color=\"textSecondary\"\n              gutterBottom\n              variant=\"h6\"\n            >\n              Products\n            </Typography>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h3\"\n            >\n              $24,000\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Avatar className={classes.avatar}>\n              <MoneyIcon />\n            </Avatar>\n          </Grid>\n        </Grid>\n        <Box\n          mt={2}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowDownwardIcon className={classes.differenceIcon} />\n          <Typography\n            className={classes.differenceValue}\n            variant=\"body2\"\n          >\n            12%\n          </Typography>\n          <Typography\n            color=\"textSecondary\"\n            variant=\"caption\"\n          >\n            Since last month\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\nexport default Products;\n","import React from \"react\";\nimport { Container, Grid, makeStyles } from \"@material-ui/core\";\nimport Page from \"../../components/Page\";\nimport LatestOrders from \"./LatestOrders\";\nimport Orders from \"./Orders\";\nimport Cost from \"./Cost\";\nimport Products from \"./Products\";\nimport { getDashboardStats } from \"../../actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  dispatch(getDashboardStats())\n  return (\n    <Page className={classes.root} title=\"Dashboard\">\n      <Container maxWidth={false}>\n        <Grid container spacing={3}>\n          <Grid item lg={4} sm={4} xl={4} xs={12}>\n            <Orders />\n          </Grid>\n          <Grid item lg={4} sm={4} xl={4} xs={12}>\n            <Products />\n          </Grid>\n          <Grid item lg={4} sm={4} xl={4} xs={12}>\n            <Cost />\n          </Grid>\n          <Grid item md={12}>\n            <LatestOrders />\n          </Grid>\n        </Grid>\n      </Container>\n    </Page>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}