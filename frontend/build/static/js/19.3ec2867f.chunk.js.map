{"version":3,"sources":["components/Page.js","views/auth/LoginView.js"],"names":["Page","forwardRef","ref","children","title","rest","propTypes","PropTypes","node","isRequired","string","useStyles","makeStyles","theme","root","height","paddingBottom","spacing","paddingTop","box","display","homeBox","backgroundImage","backgroundRepeat","backgroundSize","margin","loginBox","marginTop","LoginView","classes","navigate","useNavigate","dispatch","useDispatch","appState","useSelector","state","app","user","alert","show","Toast","message","hideAlert","useEffect","isAuthenticated","role","replace","className","item","md","xs","initialValues","userName","password","validationSchema","Yup","shape","max","required","onSubmit","values","formik","login","setSubmitting","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","mb","color","variant","gutterBottom","error","Boolean","fullWidth","helperText","label","name","type","onBlur","onChange","value","my","disabled","isFormValid","size","data-testid","component","RouterLink","to"],"mappings":"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","file":"static/js/19.3ec2867f.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\n\nconst Page = forwardRef(({ children, title = '', ...rest }, ref) => (\n  <div ref={ref} {...rest}>\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n    {children}\n  </div>\n));\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Page;\n","import React, { useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n  makeStyles,\n  Grid,\n} from '@material-ui/core';\nimport Page from '../../components/Page';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, hideAlert } from '../../actions';\nimport Toast from '../../modules/toast';\nimport {isFormValid} from '../../modules/helpers';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  box:{\n    display: 'flex'\n  },\n  homeBox: {\n    height: '100%',\n    backgroundImage: `url('/images/bg.png')`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'contain',\n    margin: theme.spacing(6)\n  },\n  loginBox: {\n    height: '100%',\n    marginTop: theme.spacing(10)\n  }\n}));\n\nconst LoginView = () => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const appState = useSelector(state => state.app);\n  const user = useSelector(state => state.user);\n\n  if (appState.alert.show) {\n    Toast({ message: appState.alert.message });\n    dispatch(hideAlert());\n  }\n  useEffect(()=>{\n    if (user.isAuthenticated) {\n      if(user.user.role === 'table'){\n        navigate('/table', { replace: true });\n        return;\n      }\n      if(user.user.role === 'kitchen'){\n        navigate('/kitchen', { replace: true });\n        return;\n      }\n      navigate('/app/dashboard', { replace: true });\n    }\n  },[user.isAuthenticated])\n \n  return (\n    <Page className={classes.root} title=\"Login\">\n      <Box className={classes.box}>\n        <Container className={classes.box}>\n        <Grid item md={12} xs={false} className={classes.homeBox}>\n        </Grid>\n        <Grid className={classes.loginBox} item md={12} xs={12}>\n          <Formik\n            initialValues={{\n              userName: '',\n              password: '',\n            }}\n            validationSchema={Yup.object().shape({\n              userName: Yup.string()\n                .max(255)\n                .required('UserName is required'),\n              password: Yup.string()\n                .max(255)\n                .required('Password is required'),\n            })}\n            onSubmit={(values, formik) => {\n              dispatch(login(values));\n              formik.setSubmitting(false);\n            }}\n          >\n            {({\n              errors,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              isSubmitting,\n              touched,\n              values,\n            }) => (\n\n              <form onSubmit={handleSubmit}>\n                <Box mb={3}>\n                  <Typography color=\"textPrimary\" variant=\"h2\">\n                    Sign in\n                  </Typography>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n                    Sign in on the internal platform\n                  </Typography>\n                </Box>\n                <TextField\n                  error={Boolean(touched.userName && errors.userName)}\n                  fullWidth\n                  helperText={touched.userName && errors.userName}\n                  label=\"Username\"\n                  margin=\"normal\"\n                  name=\"userName\"\n                  type=\"text\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.userName}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.password && errors.password)}\n                  fullWidth\n                  helperText={touched.password && errors.password}\n                  label=\"Password\"\n                  margin=\"normal\"\n                  name=\"password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"password\"\n                  value={values.password}\n                  variant=\"outlined\"\n                />\n                <Box my={2}>\n                  <Button\n                    color=\"primary\"\n                    disabled={isSubmitting || !isFormValid(errors, touched)}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                    data-testid=\"label\"\n                  >\n                    Sign in now\n                  </Button>\n                </Box>\n                <Typography color=\"textSecondary\" variant=\"body1\">\n                  Don&apos;t have an account?{' '}\n                  <Link component={RouterLink} to=\"/register\" variant=\"h6\">\n                    Sign up\n                  </Link>\n                </Typography>\n              </form>\n            )}\n          </Formik>\n        </Grid>\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default LoginView;\n"],"sourceRoot":""}